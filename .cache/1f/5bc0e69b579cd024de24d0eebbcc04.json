{"id":"node_modules/@leichtgewicht/ip-codec/index.js","dependencies":[{"name":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\package.json","includedInParent":true,"mtime":1630849169105},{"name":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\node_modules\\@leichtgewicht\\ip-codec\\package.json","includedInParent":true,"mtime":1630848961129}],"generated":{"js":"const v4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/\nconst v4Size = 4\nconst v6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i\nconst v6Size = 16\n\nconst v4 = {\n  name: 'v4',\n  size: v4Size,\n  isFormat: ip => v4Regex.test(ip),\n  encode (ip, buff, offset) {\n    offset = ~~offset\n    buff = buff || new Uint8Array(offset + v4Size)\n    const max = ip.length\n    let n = 0\n    for (let i = 0; i < max;) {\n      const c = ip.charCodeAt(i++)\n      if (c === 46) { // \".\"\n        buff[offset++] = n\n        n = 0\n      } else {\n        n = n * 10 + (c - 48)\n      }\n    }\n    buff[offset] = n\n    return buff\n  },\n  decode (buff, offset) {\n    offset = ~~offset\n    return `${buff[offset++]}.${buff[offset++]}.${buff[offset++]}.${buff[offset]}`\n  }\n}\n\nconst v6 = {\n  name: 'v6',\n  size: v6Size,\n  isFormat: ip => ip.length > 0 && v6Regex.test(ip),\n  encode (ip, buff, offset) {\n    offset = ~~offset\n    let end = offset + v6Size\n    let fill = -1\n    let hexN = 0\n    let decN = 0\n    let prevColon = true\n    let useDec = false\n    buff = buff || new Uint8Array(offset + v6Size)\n    // Note: This algorithm needs to check if the offset\n    // could exceed the buffer boundaries as it supports\n    // non-standard compliant encodings that may go beyond\n    // the boundary limits. if (offset < end) checks should\n    // not be necessary...\n    for (let i = 0; i < ip.length; i++) {\n      let c = ip.charCodeAt(i)\n      if (c === 58) { // :\n        if (prevColon) {\n          if (fill !== -1) {\n            // Not Standard! (standard doesn't allow multiple ::)\n            // We need to treat\n            if (offset < end) buff[offset] = 0\n            if (offset < end - 1) buff[offset + 1] = 0\n            offset += 2\n          } else if (offset < end) {\n            // :: in the middle\n            fill = offset\n          }\n        } else {\n          // : ends the previous number\n          if (useDec === true) {\n            // Non-standard! (ipv4 should be at end only)\n            // A ipv4 address should not be found anywhere else but at\n            // the end. This codec also support putting characters\n            // after the ipv4 address..\n            if (offset < end) buff[offset] = decN\n            offset++\n          } else {\n            if (offset < end) buff[offset] = hexN >> 8\n            if (offset < end - 1) buff[offset + 1] = hexN & 0xff\n            offset += 2\n          }\n          hexN = 0\n          decN = 0\n        }\n        prevColon = true\n        useDec = false\n      } else if (c === 46) { // . indicates IPV4 notation\n        if (offset < end) buff[offset] = decN\n        offset++\n        decN = 0\n        hexN = 0\n        prevColon = false\n        useDec = true\n      } else {\n        prevColon = false\n        if (c >= 97) {\n          c -= 87 // a-f ... 97~102 -87 => 10~15\n        } else if (c >= 65) {\n          c -= 55 // A-F ... 65~70 -55 => 10~15\n        } else {\n          c -= 48 // 0-9 ... starting from charCode 48\n          decN = decN * 10 + c\n        }\n        // We don't know yet if its a dec or hex number\n        hexN = (hexN << 4) + c\n      }\n    }\n    if (prevColon === false) {\n      // Commiting last number\n      if (useDec === true) {\n        if (offset < end) buff[offset] = decN\n        offset++\n      } else {\n        if (offset < end) buff[offset] = hexN >> 8\n        if (offset < end - 1) buff[offset + 1] = hexN & 0xff\n        offset += 2\n      }\n    } else if (fill === 0) {\n      // Not Standard! (standard doesn't allow multiple ::)\n      // This means that a : was found at the start AND end which means the\n      // end needs to be treated as 0 entry...\n      if (offset < end) buff[offset] = 0\n      if (offset < end - 1) buff[offset + 1] = 0\n      offset += 2\n    } else if (fill !== -1) {\n      // Non-standard! (standard doens't allow multiple ::)\n      // Here we find that there has been a :: somewhere in the middle\n      // and the end. To treat the end with priority we need to move all\n      // written data two bytes to the right.\n      offset += 2\n      for (let i = Math.min(offset - 1, end - 1); i >= fill + 2; i--) {\n        buff[i] = buff[i - 2]\n      }\n      buff[fill] = 0\n      buff[fill + 1] = 0\n      fill = offset\n    }\n    if (fill !== offset && fill !== -1) {\n      // Move the written numbers to the end while filling the everything\n      // \"fill\" to the bytes with zeros.\n      if (offset > end - 2) {\n        // Non Standard support, when the cursor exceeds bounds.\n        offset = end - 2\n      }\n      while (end > fill) {\n        buff[--end] = offset < end && offset > fill ? buff[--offset] : 0\n      }\n    } else {\n      // Fill the rest with zeros\n      while (offset < end) {\n        buff[offset++] = 0\n      }\n    }\n    return buff\n  },\n  decode (buff, offset) {\n    offset = ~~offset\n    let result = ''\n    for (let i = 0; i < v6Size; i += 2) {\n      if (i !== 0) {\n        result += ':'\n      }\n      result += (buff[offset + i] << 8 | buff[offset + i + 1]).toString(16)\n    }\n    return result\n      .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n      .replace(/:{3,4}/, '::')\n  }\n}\n\nfunction sizeOf (ip) {\n  if (v4.isFormat(ip)) return v4.size\n  if (v6.isFormat(ip)) return v6.size\n  throw Error(`Invalid ip address: ${ip}`)\n}\n\nmodule.exports = Object.freeze({\n  name: 'ip',\n  sizeOf,\n  familyOf: string => sizeOf(string) === v4.size ? 1 : 2,\n  v4,\n  v6,\n  encode (ip, buff, offset) {\n    offset = ~~offset\n    const size = sizeOf(ip)\n    if (typeof buff === 'function') {\n      buff = buff(offset + size)\n    }\n    if (size === v4.size) {\n      return v4.encode(ip, buff, offset)\n    }\n    return v6.encode(ip, buff, offset)\n  },\n  decode (buff, offset, length) {\n    offset = ~~offset\n    length = length || (buff.length - offset)\n    if (length === v4.size) {\n      return v4.decode(buff, offset, length)\n    }\n    if (length === v6.size) {\n      return v6.decode(buff, offset, length)\n    }\n    throw Error(`Invalid buffer size needs to be ${v4.size} for v4 or ${v6.size} for v6.`)\n  }\n})\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@leichtgewicht/ip-codec/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}}],"sources":{"node_modules/@leichtgewicht/ip-codec/index.js":"const v4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/\nconst v4Size = 4\nconst v6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i\nconst v6Size = 16\n\nconst v4 = {\n  name: 'v4',\n  size: v4Size,\n  isFormat: ip => v4Regex.test(ip),\n  encode (ip, buff, offset) {\n    offset = ~~offset\n    buff = buff || new Uint8Array(offset + v4Size)\n    const max = ip.length\n    let n = 0\n    for (let i = 0; i < max;) {\n      const c = ip.charCodeAt(i++)\n      if (c === 46) { // \".\"\n        buff[offset++] = n\n        n = 0\n      } else {\n        n = n * 10 + (c - 48)\n      }\n    }\n    buff[offset] = n\n    return buff\n  },\n  decode (buff, offset) {\n    offset = ~~offset\n    return `${buff[offset++]}.${buff[offset++]}.${buff[offset++]}.${buff[offset]}`\n  }\n}\n\nconst v6 = {\n  name: 'v6',\n  size: v6Size,\n  isFormat: ip => ip.length > 0 && v6Regex.test(ip),\n  encode (ip, buff, offset) {\n    offset = ~~offset\n    let end = offset + v6Size\n    let fill = -1\n    let hexN = 0\n    let decN = 0\n    let prevColon = true\n    let useDec = false\n    buff = buff || new Uint8Array(offset + v6Size)\n    // Note: This algorithm needs to check if the offset\n    // could exceed the buffer boundaries as it supports\n    // non-standard compliant encodings that may go beyond\n    // the boundary limits. if (offset < end) checks should\n    // not be necessary...\n    for (let i = 0; i < ip.length; i++) {\n      let c = ip.charCodeAt(i)\n      if (c === 58) { // :\n        if (prevColon) {\n          if (fill !== -1) {\n            // Not Standard! (standard doesn't allow multiple ::)\n            // We need to treat\n            if (offset < end) buff[offset] = 0\n            if (offset < end - 1) buff[offset + 1] = 0\n            offset += 2\n          } else if (offset < end) {\n            // :: in the middle\n            fill = offset\n          }\n        } else {\n          // : ends the previous number\n          if (useDec === true) {\n            // Non-standard! (ipv4 should be at end only)\n            // A ipv4 address should not be found anywhere else but at\n            // the end. This codec also support putting characters\n            // after the ipv4 address..\n            if (offset < end) buff[offset] = decN\n            offset++\n          } else {\n            if (offset < end) buff[offset] = hexN >> 8\n            if (offset < end - 1) buff[offset + 1] = hexN & 0xff\n            offset += 2\n          }\n          hexN = 0\n          decN = 0\n        }\n        prevColon = true\n        useDec = false\n      } else if (c === 46) { // . indicates IPV4 notation\n        if (offset < end) buff[offset] = decN\n        offset++\n        decN = 0\n        hexN = 0\n        prevColon = false\n        useDec = true\n      } else {\n        prevColon = false\n        if (c >= 97) {\n          c -= 87 // a-f ... 97~102 -87 => 10~15\n        } else if (c >= 65) {\n          c -= 55 // A-F ... 65~70 -55 => 10~15\n        } else {\n          c -= 48 // 0-9 ... starting from charCode 48\n          decN = decN * 10 + c\n        }\n        // We don't know yet if its a dec or hex number\n        hexN = (hexN << 4) + c\n      }\n    }\n    if (prevColon === false) {\n      // Commiting last number\n      if (useDec === true) {\n        if (offset < end) buff[offset] = decN\n        offset++\n      } else {\n        if (offset < end) buff[offset] = hexN >> 8\n        if (offset < end - 1) buff[offset + 1] = hexN & 0xff\n        offset += 2\n      }\n    } else if (fill === 0) {\n      // Not Standard! (standard doesn't allow multiple ::)\n      // This means that a : was found at the start AND end which means the\n      // end needs to be treated as 0 entry...\n      if (offset < end) buff[offset] = 0\n      if (offset < end - 1) buff[offset + 1] = 0\n      offset += 2\n    } else if (fill !== -1) {\n      // Non-standard! (standard doens't allow multiple ::)\n      // Here we find that there has been a :: somewhere in the middle\n      // and the end. To treat the end with priority we need to move all\n      // written data two bytes to the right.\n      offset += 2\n      for (let i = Math.min(offset - 1, end - 1); i >= fill + 2; i--) {\n        buff[i] = buff[i - 2]\n      }\n      buff[fill] = 0\n      buff[fill + 1] = 0\n      fill = offset\n    }\n    if (fill !== offset && fill !== -1) {\n      // Move the written numbers to the end while filling the everything\n      // \"fill\" to the bytes with zeros.\n      if (offset > end - 2) {\n        // Non Standard support, when the cursor exceeds bounds.\n        offset = end - 2\n      }\n      while (end > fill) {\n        buff[--end] = offset < end && offset > fill ? buff[--offset] : 0\n      }\n    } else {\n      // Fill the rest with zeros\n      while (offset < end) {\n        buff[offset++] = 0\n      }\n    }\n    return buff\n  },\n  decode (buff, offset) {\n    offset = ~~offset\n    let result = ''\n    for (let i = 0; i < v6Size; i += 2) {\n      if (i !== 0) {\n        result += ':'\n      }\n      result += (buff[offset + i] << 8 | buff[offset + i + 1]).toString(16)\n    }\n    return result\n      .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n      .replace(/:{3,4}/, '::')\n  }\n}\n\nfunction sizeOf (ip) {\n  if (v4.isFormat(ip)) return v4.size\n  if (v6.isFormat(ip)) return v6.size\n  throw Error(`Invalid ip address: ${ip}`)\n}\n\nmodule.exports = Object.freeze({\n  name: 'ip',\n  sizeOf,\n  familyOf: string => sizeOf(string) === v4.size ? 1 : 2,\n  v4,\n  v6,\n  encode (ip, buff, offset) {\n    offset = ~~offset\n    const size = sizeOf(ip)\n    if (typeof buff === 'function') {\n      buff = buff(offset + size)\n    }\n    if (size === v4.size) {\n      return v4.encode(ip, buff, offset)\n    }\n    return v6.encode(ip, buff, offset)\n  },\n  decode (buff, offset, length) {\n    offset = ~~offset\n    length = length || (buff.length - offset)\n    if (length === v4.size) {\n      return v4.decode(buff, offset, length)\n    }\n    if (length === v6.size) {\n      return v6.decode(buff, offset, length)\n    }\n    throw Error(`Invalid buffer size needs to be ${v4.size} for v4 or ${v6.size} for v6.`)\n  }\n})\n"},"lineCount":203}},"error":null,"hash":"4641dc66a94f2ca0cd44db1b6504e3a3","cacheData":{"env":{}}}