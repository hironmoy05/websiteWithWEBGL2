{"id":"node_modules/k-rpc/node_modules/k-bucket/index.js","dependencies":[{"name":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\package.json","includedInParent":true,"mtime":1630849169105},{"name":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\node_modules\\k-rpc\\node_modules\\k-bucket\\package.json","includedInParent":true,"mtime":1630848960249},{"name":"randombytes","loc":{"line":31,"column":26},"parent":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\node_modules\\k-rpc\\node_modules\\k-bucket\\index.js","resolved":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\node_modules\\randombytes\\browser.js"},{"name":"events","loc":{"line":32,"column":27},"parent":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\node_modules\\k-rpc\\node_modules\\k-bucket\\index.js","resolved":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\node_modules\\events\\events.js"},{"name":"inherits","loc":{"line":33,"column":23},"parent":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\node_modules\\k-rpc\\node_modules\\k-bucket\\index.js","resolved":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\node_modules\\inherits\\inherits_browser.js"}],"generated":{"js":"/*\nindex.js - Kademlia DHT K-bucket implementation as a binary tree.\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2016 Tristan Slominski\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\n'use strict'\n\nvar randomBytes = require('randombytes')\nvar EventEmitter = require('events').EventEmitter\nvar inherits = require('inherits')\n\nmodule.exports = KBucket\n\n// array1: Uint8Array\n// array2: Uint8Array\n// Return: boolean\nfunction arrayEquals (array1, array2) {\n  if (array1 === array2) {\n    return true\n  }\n  if (array1.length !== array2.length) {\n    return false\n  }\n  for (var i = 0, length = array1.length; i < length; ++i) {\n    if (array1[i] !== array2[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction createNode () {\n  return { contacts: [], dontSplit: false, left: null, right: null }\n}\n\n/*\n  * `options`:\n    * `distance`: _Function_\n        `function (firstId, secondId) { return distance }` An optional\n        `distance` function that gets two `id` Uint8Arrays\n        and return distance (as number) between them.\n    * `arbiter`: _Function_ _(Default: vectorClock arbiter)_\n        `function (incumbent, candidate) { return contact; }` An optional\n        `arbiter` function that givent two `contact` objects with the same `id`\n        returns the desired object to be used for updating the k-bucket. For\n        more details, see [arbiter function](#arbiter-function).\n    * `localNodeId`: _Uint8Array_ An optional Uint8Array representing the local node id.\n        If not provided, a local node id will be created via `randomBytes(20)`.\n    * `metadata`: _Object_ _(Default: {})_ Optional satellite data to include\n        with the k-bucket. `metadata` property is guaranteed not be altered by,\n        it is provided as an explicit container for users of k-bucket to store\n        implementation-specific data.\n    * `numberOfNodesPerKBucket`: _Integer_ _(Default: 20)_ The number of nodes\n        that a k-bucket can contain before being full or split.\n    * `numberOfNodesToPing`: _Integer_ _(Default: 3)_ The number of nodes to\n        ping when a bucket that should not be split becomes full. KBucket will\n        emit a `ping` event that contains `numberOfNodesToPing` nodes that have\n        not been contacted the longest.\n*/\nfunction KBucket (options) {\n  EventEmitter.call(this)\n  options = options || {}\n\n  this.localNodeId = options.localNodeId || randomBytes(20)\n  if (!(this.localNodeId instanceof Uint8Array)) throw new TypeError('localNodeId is not a Uint8Array')\n  this.numberOfNodesPerKBucket = options.numberOfNodesPerKBucket || 20\n  this.numberOfNodesToPing = options.numberOfNodesToPing || 3\n  this.distance = options.distance || KBucket.distance\n  // use an arbiter from options or vectorClock arbiter by default\n  this.arbiter = options.arbiter || KBucket.arbiter\n\n  this.root = createNode()\n\n  this.metadata = Object.assign({}, options.metadata)\n}\n\ninherits(KBucket, EventEmitter)\n\nKBucket.arbiter = function (incumbent, candidate) {\n  return incumbent.vectorClock > candidate.vectorClock ? incumbent : candidate\n}\n\nKBucket.distance = function (firstId, secondId) {\n  var distance = 0\n  var min = Math.min(firstId.length, secondId.length)\n  var max = Math.max(firstId.length, secondId.length)\n  for (var i = 0; i < min; ++i) distance = distance * 256 + (firstId[i] ^ secondId[i])\n  for (; i < max; ++i) distance = distance * 256 + 255\n  return distance\n}\n\n// contact: *required* the contact object to add\nKBucket.prototype.add = function (contact) {\n  if (!contact || !(contact.id instanceof Uint8Array)) throw new TypeError('contact.id is not a Uint8Array')\n  var bitIndex = 0\n\n  var node = this.root\n  while (node.contacts === null) {\n    // this is not a leaf node but an inner node with 'low' and 'high'\n    // branches; we will check the appropriate bit of the identifier and\n    // delegate to the appropriate node for further processing\n    node = this._determineNode(node, contact.id, bitIndex++)\n  }\n\n  // check if the contact already exists\n  var index = this._indexOf(node, contact.id)\n  if (index >= 0) {\n    this._update(node, index, contact)\n    return this\n  }\n\n  if (node.contacts.length < this.numberOfNodesPerKBucket) {\n    node.contacts.push(contact)\n    this.emit('added', contact)\n    return this\n  }\n\n  // the bucket is full\n  if (node.dontSplit) {\n    // we are not allowed to split the bucket\n    // we need to ping the first this.numberOfNodesToPing\n    // in order to determine if they are alive\n    // only if one of the pinged nodes does not respond, can the new contact\n    // be added (this prevents DoS flodding with new invalid contacts)\n    this.emit('ping', node.contacts.slice(0, this.numberOfNodesToPing), contact)\n    return this\n  }\n\n  this._split(node, bitIndex)\n  return this.add(contact)\n}\n\n// id: Uint8Array *required* node id\n// n: Integer (Default: Infinity) maximum number of closest contacts to return\n// Return: Array of maximum of `n` closest contacts to the node id\nKBucket.prototype.closest = function (id, n) {\n  if (!(id instanceof Uint8Array)) throw new TypeError('id is not a Uint8Array')\n  if (n === undefined) n = Infinity\n  if (typeof n !== 'number' || isNaN(n) || n <= 0) throw new TypeError('n is not positive number')\n  var contacts = []\n\n  for (var nodes = [ this.root ], bitIndex = 0; nodes.length > 0 && contacts.length < n;) {\n    var node = nodes.pop()\n    if (node.contacts === null) {\n      var detNode = this._determineNode(node, id, bitIndex++)\n      nodes.push(node.left === detNode ? node.right : node.left)\n      nodes.push(detNode)\n    } else {\n      contacts = contacts.concat(node.contacts)\n    }\n  }\n\n  var self = this\n  return contacts\n    .map(function (a) {\n      return [self.distance(a.id, id), a]\n    })\n    .sort(function (a, b) {\n      return a[0] - b[0]\n    })\n    .slice(0, n)\n    .map(function (a) {\n      return a[1]\n    })\n}\n\n// Counts the number of contacts recursively.\n// If this is a leaf, just return the number of contacts contained. Otherwise,\n// return the length of the high and low branches combined.\nKBucket.prototype.count = function () {\n  // return this.toArray().length\n  var count = 0\n  for (var nodes = [ this.root ]; nodes.length > 0;) {\n    var node = nodes.pop()\n    if (node.contacts === null) nodes.push(node.right, node.left)\n    else count += node.contacts.length\n  }\n  return count\n}\n\n// Determines whether the id at the bitIndex is 0 or 1.\n// Return left leaf if `id` at `bitIndex` is 0, right leaf otherwise\n// node: internal object that has 2 leafs: left and right\n// id: a Uint8Array to compare localNodeId with\n// bitIndex: the bitIndex to which bit to check in the id Uint8Array\nKBucket.prototype._determineNode = function (node, id, bitIndex) {\n  // **NOTE** remember that id is a Uint8Array and has granularity of\n  // bytes (8 bits), whereas the bitIndex is the _bit_ index (not byte)\n\n  // id's that are too short are put in low bucket (1 byte = 8 bits)\n  // ~~(bitIndex / 8) finds how many bytes the bitIndex describes, \"~~\" is\n  // equivalent to \"parseInt\"\n  // bitIndex % 8 checks if we have extra bits beyond byte multiples\n  // if number of bytes is <= no. of bytes described by bitIndex and there\n  // are extra bits to consider, this means id has less bits than what\n  // bitIndex describes, id therefore is too short, and will be put in low\n  // bucket\n  var bytesDescribedByBitIndex = ~~(bitIndex / 8)\n  var bitIndexWithinByte = bitIndex % 8\n  if ((id.length <= bytesDescribedByBitIndex) && (bitIndexWithinByte !== 0)) return node.left\n\n  var byteUnderConsideration = id[bytesDescribedByBitIndex]\n\n  // byteUnderConsideration is an integer from 0 to 255 represented by 8 bits\n  // where 255 is 11111111 and 0 is 00000000\n  // in order to find out whether the bit at bitIndexWithinByte is set\n  // we construct Math.pow(2, (7 - bitIndexWithinByte)) which will consist\n  // of all bits being 0, with only one bit set to 1\n  // for example, if bitIndexWithinByte is 3, we will construct 00010000 by\n  // Math.pow(2, (7 - 3)) -> Math.pow(2, 4) -> 16\n  if (byteUnderConsideration & Math.pow(2, (7 - bitIndexWithinByte))) return node.right\n\n  return node.left\n}\n\n// Get a contact by its exact ID.\n// If this is a leaf, loop through the bucket contents and return the correct\n// contact if we have it or null if not. If this is an inner node, determine\n// which branch of the tree to traverse and repeat.\n// id: Uint8Array *required* The ID of the contact to fetch.\nKBucket.prototype.get = function (id) {\n  if (!(id instanceof Uint8Array)) throw new TypeError('id is not a Uint8Array')\n  var bitIndex = 0\n\n  var node = this.root\n  while (node.contacts === null) {\n    node = this._determineNode(node, id, bitIndex++)\n  }\n\n  var index = this._indexOf(node, id) // index of uses contact id for matching\n  return index >= 0 ? node.contacts[index] : null\n}\n\n// node: internal object that has 2 leafs: left and right\n// id: Uint8Array Contact node id.\n// Returns the index of the contact with the given id if it exists\nKBucket.prototype._indexOf = function (node, id) {\n  for (var i = 0; i < node.contacts.length; ++i) {\n    if (arrayEquals(node.contacts[i].id, id)) return i\n  }\n\n  return -1\n}\n\n// id: Uint8Array *required* The ID of the contact to remove.\nKBucket.prototype.remove = function (id) {\n  if (!(id instanceof Uint8Array)) throw new TypeError('id is not a Uint8Array')\n  var bitIndex = 0\n\n  var node = this.root\n  while (node.contacts === null) {\n    node = this._determineNode(node, id, bitIndex++)\n  }\n\n  var index = this._indexOf(node, id)\n  if (index >= 0) {\n    var contact = node.contacts.splice(index, 1)[0]\n    this.emit('removed', contact)\n  }\n\n  return this\n}\n\n// Splits the node, redistributes contacts to the new nodes, and marks the\n// node that was split as an inner node of the binary tree of nodes by\n// setting this.root.contacts = null\n// node: *required* node for splitting\n// bitIndex: *required* the bitIndex to which byte to check in the Uint8Array\n//          for navigating the binary tree\nKBucket.prototype._split = function (node, bitIndex) {\n  node.left = createNode()\n  node.right = createNode()\n\n  // redistribute existing contacts amongst the two newly created nodes\n  for (var i = 0; i < node.contacts.length; ++i) {\n    var contact = node.contacts[i]\n    this._determineNode(node, contact.id, bitIndex).contacts.push(contact)\n  }\n  node.contacts = null // mark as inner tree node\n\n  // don't split the \"far away\" node\n  // we check where the local node would end up and mark the other one as\n  // \"dontSplit\" (i.e. \"far away\")\n  var detNode = this._determineNode(node, this.localNodeId, bitIndex)\n  var otherNode = node.left === detNode ? node.right : node.left\n  otherNode.dontSplit = true\n}\n\n// Returns all the contacts contained in the tree as an array.\n// If this is a leaf, return a copy of the bucket. `slice` is used so that we\n// don't accidentally leak an internal reference out that might be accidentally\n// misused. If this is not a leaf, return the union of the low and high\n// branches (themselves also as arrays).\nKBucket.prototype.toArray = function () {\n  var result = []\n  for (var nodes = [ this.root ]; nodes.length > 0;) {\n    var node = nodes.pop()\n    if (node.contacts === null) nodes.push(node.right, node.left)\n    else result = result.concat(node.contacts)\n  }\n  return result\n}\n\n// Updates the contact selected by the arbiter.\n// If the selection is our old contact and the candidate is some new contact\n// then the new contact is abandoned (not added).\n// If the selection is our old contact and the candidate is our old contact\n// then we are refreshing the contact and it is marked as most recently\n// contacted (by being moved to the right/end of the bucket array).\n// If the selection is our new contact, the old contact is removed and the new\n// contact is marked as most recently contacted.\n// node: internal object that has 2 leafs: left and right\n// contact: *required* the contact to update\n// index: *required* the index in the bucket where contact exists\n//        (index has already been computed in a previous calculation)\nKBucket.prototype._update = function (node, index, contact) {\n  // sanity check\n  if (!arrayEquals(node.contacts[index].id, contact.id)) throw new Error('wrong index for _update')\n\n  var incumbent = node.contacts[index]\n  var selection = this.arbiter(incumbent, contact)\n  // if the selection is our old contact and the candidate is some new\n  // contact, then there is nothing to do\n  if (selection === incumbent && incumbent !== contact) return\n\n  node.contacts.splice(index, 1) // remove old contact\n  node.contacts.push(selection) // add more recent contact version\n  this.emit('updated', incumbent, selection)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/k-rpc/node_modules/k-bucket/index.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}}],"sources":{"node_modules/k-rpc/node_modules/k-bucket/index.js":"/*\nindex.js - Kademlia DHT K-bucket implementation as a binary tree.\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2016 Tristan Slominski\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\n'use strict'\n\nvar randomBytes = require('randombytes')\nvar EventEmitter = require('events').EventEmitter\nvar inherits = require('inherits')\n\nmodule.exports = KBucket\n\n// array1: Uint8Array\n// array2: Uint8Array\n// Return: boolean\nfunction arrayEquals (array1, array2) {\n  if (array1 === array2) {\n    return true\n  }\n  if (array1.length !== array2.length) {\n    return false\n  }\n  for (var i = 0, length = array1.length; i < length; ++i) {\n    if (array1[i] !== array2[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction createNode () {\n  return { contacts: [], dontSplit: false, left: null, right: null }\n}\n\n/*\n  * `options`:\n    * `distance`: _Function_\n        `function (firstId, secondId) { return distance }` An optional\n        `distance` function that gets two `id` Uint8Arrays\n        and return distance (as number) between them.\n    * `arbiter`: _Function_ _(Default: vectorClock arbiter)_\n        `function (incumbent, candidate) { return contact; }` An optional\n        `arbiter` function that givent two `contact` objects with the same `id`\n        returns the desired object to be used for updating the k-bucket. For\n        more details, see [arbiter function](#arbiter-function).\n    * `localNodeId`: _Uint8Array_ An optional Uint8Array representing the local node id.\n        If not provided, a local node id will be created via `randomBytes(20)`.\n    * `metadata`: _Object_ _(Default: {})_ Optional satellite data to include\n        with the k-bucket. `metadata` property is guaranteed not be altered by,\n        it is provided as an explicit container for users of k-bucket to store\n        implementation-specific data.\n    * `numberOfNodesPerKBucket`: _Integer_ _(Default: 20)_ The number of nodes\n        that a k-bucket can contain before being full or split.\n    * `numberOfNodesToPing`: _Integer_ _(Default: 3)_ The number of nodes to\n        ping when a bucket that should not be split becomes full. KBucket will\n        emit a `ping` event that contains `numberOfNodesToPing` nodes that have\n        not been contacted the longest.\n*/\nfunction KBucket (options) {\n  EventEmitter.call(this)\n  options = options || {}\n\n  this.localNodeId = options.localNodeId || randomBytes(20)\n  if (!(this.localNodeId instanceof Uint8Array)) throw new TypeError('localNodeId is not a Uint8Array')\n  this.numberOfNodesPerKBucket = options.numberOfNodesPerKBucket || 20\n  this.numberOfNodesToPing = options.numberOfNodesToPing || 3\n  this.distance = options.distance || KBucket.distance\n  // use an arbiter from options or vectorClock arbiter by default\n  this.arbiter = options.arbiter || KBucket.arbiter\n\n  this.root = createNode()\n\n  this.metadata = Object.assign({}, options.metadata)\n}\n\ninherits(KBucket, EventEmitter)\n\nKBucket.arbiter = function (incumbent, candidate) {\n  return incumbent.vectorClock > candidate.vectorClock ? incumbent : candidate\n}\n\nKBucket.distance = function (firstId, secondId) {\n  var distance = 0\n  var min = Math.min(firstId.length, secondId.length)\n  var max = Math.max(firstId.length, secondId.length)\n  for (var i = 0; i < min; ++i) distance = distance * 256 + (firstId[i] ^ secondId[i])\n  for (; i < max; ++i) distance = distance * 256 + 255\n  return distance\n}\n\n// contact: *required* the contact object to add\nKBucket.prototype.add = function (contact) {\n  if (!contact || !(contact.id instanceof Uint8Array)) throw new TypeError('contact.id is not a Uint8Array')\n  var bitIndex = 0\n\n  var node = this.root\n  while (node.contacts === null) {\n    // this is not a leaf node but an inner node with 'low' and 'high'\n    // branches; we will check the appropriate bit of the identifier and\n    // delegate to the appropriate node for further processing\n    node = this._determineNode(node, contact.id, bitIndex++)\n  }\n\n  // check if the contact already exists\n  var index = this._indexOf(node, contact.id)\n  if (index >= 0) {\n    this._update(node, index, contact)\n    return this\n  }\n\n  if (node.contacts.length < this.numberOfNodesPerKBucket) {\n    node.contacts.push(contact)\n    this.emit('added', contact)\n    return this\n  }\n\n  // the bucket is full\n  if (node.dontSplit) {\n    // we are not allowed to split the bucket\n    // we need to ping the first this.numberOfNodesToPing\n    // in order to determine if they are alive\n    // only if one of the pinged nodes does not respond, can the new contact\n    // be added (this prevents DoS flodding with new invalid contacts)\n    this.emit('ping', node.contacts.slice(0, this.numberOfNodesToPing), contact)\n    return this\n  }\n\n  this._split(node, bitIndex)\n  return this.add(contact)\n}\n\n// id: Uint8Array *required* node id\n// n: Integer (Default: Infinity) maximum number of closest contacts to return\n// Return: Array of maximum of `n` closest contacts to the node id\nKBucket.prototype.closest = function (id, n) {\n  if (!(id instanceof Uint8Array)) throw new TypeError('id is not a Uint8Array')\n  if (n === undefined) n = Infinity\n  if (typeof n !== 'number' || isNaN(n) || n <= 0) throw new TypeError('n is not positive number')\n  var contacts = []\n\n  for (var nodes = [ this.root ], bitIndex = 0; nodes.length > 0 && contacts.length < n;) {\n    var node = nodes.pop()\n    if (node.contacts === null) {\n      var detNode = this._determineNode(node, id, bitIndex++)\n      nodes.push(node.left === detNode ? node.right : node.left)\n      nodes.push(detNode)\n    } else {\n      contacts = contacts.concat(node.contacts)\n    }\n  }\n\n  var self = this\n  return contacts\n    .map(function (a) {\n      return [self.distance(a.id, id), a]\n    })\n    .sort(function (a, b) {\n      return a[0] - b[0]\n    })\n    .slice(0, n)\n    .map(function (a) {\n      return a[1]\n    })\n}\n\n// Counts the number of contacts recursively.\n// If this is a leaf, just return the number of contacts contained. Otherwise,\n// return the length of the high and low branches combined.\nKBucket.prototype.count = function () {\n  // return this.toArray().length\n  var count = 0\n  for (var nodes = [ this.root ]; nodes.length > 0;) {\n    var node = nodes.pop()\n    if (node.contacts === null) nodes.push(node.right, node.left)\n    else count += node.contacts.length\n  }\n  return count\n}\n\n// Determines whether the id at the bitIndex is 0 or 1.\n// Return left leaf if `id` at `bitIndex` is 0, right leaf otherwise\n// node: internal object that has 2 leafs: left and right\n// id: a Uint8Array to compare localNodeId with\n// bitIndex: the bitIndex to which bit to check in the id Uint8Array\nKBucket.prototype._determineNode = function (node, id, bitIndex) {\n  // **NOTE** remember that id is a Uint8Array and has granularity of\n  // bytes (8 bits), whereas the bitIndex is the _bit_ index (not byte)\n\n  // id's that are too short are put in low bucket (1 byte = 8 bits)\n  // ~~(bitIndex / 8) finds how many bytes the bitIndex describes, \"~~\" is\n  // equivalent to \"parseInt\"\n  // bitIndex % 8 checks if we have extra bits beyond byte multiples\n  // if number of bytes is <= no. of bytes described by bitIndex and there\n  // are extra bits to consider, this means id has less bits than what\n  // bitIndex describes, id therefore is too short, and will be put in low\n  // bucket\n  var bytesDescribedByBitIndex = ~~(bitIndex / 8)\n  var bitIndexWithinByte = bitIndex % 8\n  if ((id.length <= bytesDescribedByBitIndex) && (bitIndexWithinByte !== 0)) return node.left\n\n  var byteUnderConsideration = id[bytesDescribedByBitIndex]\n\n  // byteUnderConsideration is an integer from 0 to 255 represented by 8 bits\n  // where 255 is 11111111 and 0 is 00000000\n  // in order to find out whether the bit at bitIndexWithinByte is set\n  // we construct Math.pow(2, (7 - bitIndexWithinByte)) which will consist\n  // of all bits being 0, with only one bit set to 1\n  // for example, if bitIndexWithinByte is 3, we will construct 00010000 by\n  // Math.pow(2, (7 - 3)) -> Math.pow(2, 4) -> 16\n  if (byteUnderConsideration & Math.pow(2, (7 - bitIndexWithinByte))) return node.right\n\n  return node.left\n}\n\n// Get a contact by its exact ID.\n// If this is a leaf, loop through the bucket contents and return the correct\n// contact if we have it or null if not. If this is an inner node, determine\n// which branch of the tree to traverse and repeat.\n// id: Uint8Array *required* The ID of the contact to fetch.\nKBucket.prototype.get = function (id) {\n  if (!(id instanceof Uint8Array)) throw new TypeError('id is not a Uint8Array')\n  var bitIndex = 0\n\n  var node = this.root\n  while (node.contacts === null) {\n    node = this._determineNode(node, id, bitIndex++)\n  }\n\n  var index = this._indexOf(node, id) // index of uses contact id for matching\n  return index >= 0 ? node.contacts[index] : null\n}\n\n// node: internal object that has 2 leafs: left and right\n// id: Uint8Array Contact node id.\n// Returns the index of the contact with the given id if it exists\nKBucket.prototype._indexOf = function (node, id) {\n  for (var i = 0; i < node.contacts.length; ++i) {\n    if (arrayEquals(node.contacts[i].id, id)) return i\n  }\n\n  return -1\n}\n\n// id: Uint8Array *required* The ID of the contact to remove.\nKBucket.prototype.remove = function (id) {\n  if (!(id instanceof Uint8Array)) throw new TypeError('id is not a Uint8Array')\n  var bitIndex = 0\n\n  var node = this.root\n  while (node.contacts === null) {\n    node = this._determineNode(node, id, bitIndex++)\n  }\n\n  var index = this._indexOf(node, id)\n  if (index >= 0) {\n    var contact = node.contacts.splice(index, 1)[0]\n    this.emit('removed', contact)\n  }\n\n  return this\n}\n\n// Splits the node, redistributes contacts to the new nodes, and marks the\n// node that was split as an inner node of the binary tree of nodes by\n// setting this.root.contacts = null\n// node: *required* node for splitting\n// bitIndex: *required* the bitIndex to which byte to check in the Uint8Array\n//          for navigating the binary tree\nKBucket.prototype._split = function (node, bitIndex) {\n  node.left = createNode()\n  node.right = createNode()\n\n  // redistribute existing contacts amongst the two newly created nodes\n  for (var i = 0; i < node.contacts.length; ++i) {\n    var contact = node.contacts[i]\n    this._determineNode(node, contact.id, bitIndex).contacts.push(contact)\n  }\n  node.contacts = null // mark as inner tree node\n\n  // don't split the \"far away\" node\n  // we check where the local node would end up and mark the other one as\n  // \"dontSplit\" (i.e. \"far away\")\n  var detNode = this._determineNode(node, this.localNodeId, bitIndex)\n  var otherNode = node.left === detNode ? node.right : node.left\n  otherNode.dontSplit = true\n}\n\n// Returns all the contacts contained in the tree as an array.\n// If this is a leaf, return a copy of the bucket. `slice` is used so that we\n// don't accidentally leak an internal reference out that might be accidentally\n// misused. If this is not a leaf, return the union of the low and high\n// branches (themselves also as arrays).\nKBucket.prototype.toArray = function () {\n  var result = []\n  for (var nodes = [ this.root ]; nodes.length > 0;) {\n    var node = nodes.pop()\n    if (node.contacts === null) nodes.push(node.right, node.left)\n    else result = result.concat(node.contacts)\n  }\n  return result\n}\n\n// Updates the contact selected by the arbiter.\n// If the selection is our old contact and the candidate is some new contact\n// then the new contact is abandoned (not added).\n// If the selection is our old contact and the candidate is our old contact\n// then we are refreshing the contact and it is marked as most recently\n// contacted (by being moved to the right/end of the bucket array).\n// If the selection is our new contact, the old contact is removed and the new\n// contact is marked as most recently contacted.\n// node: internal object that has 2 leafs: left and right\n// contact: *required* the contact to update\n// index: *required* the index in the bucket where contact exists\n//        (index has already been computed in a previous calculation)\nKBucket.prototype._update = function (node, index, contact) {\n  // sanity check\n  if (!arrayEquals(node.contacts[index].id, contact.id)) throw new Error('wrong index for _update')\n\n  var incumbent = node.contacts[index]\n  var selection = this.arbiter(incumbent, contact)\n  // if the selection is our old contact and the candidate is some new\n  // contact, then there is nothing to do\n  if (selection === incumbent && incumbent !== contact) return\n\n  node.contacts.splice(index, 1) // remove old contact\n  node.contacts.push(selection) // add more recent contact version\n  this.emit('updated', incumbent, selection)\n}\n"},"lineCount":353}},"error":null,"hash":"1fc5925d38dc5d5424844502789e21e1","cacheData":{"env":{}}}