{"id":"Shaders/fragment.glsl","dependencies":[{"name":"E:\\D\\WEBGLWITHPARCEL\\websiteWithWEBGL2\\package.json","includedInParent":true,"mtime":1630849169105}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\n\\nvarying vec2 vUv;\\n\\nvarying vec2 vSize;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize) {\\n    vec2 tempUV = uv - vec2(0.5);\\n\\n    float quadAspect = quadSize.x/quadSize.y;\\n    float textureAspect = textureSize.x/textureSize.y;\\n    if (quadAspect<textureAspect) {\\n        tempUV = tempUV*vec2(quadAspect/textureAspect, 1.);\\n    } else {\\n        tempUV = tempUV*vec2(1., textureAspect/quadAspect);\\n    }\\n\\n    tempUV += vec2(0.5);\\n    return tempUV;\\n}\\n\\nvoid main () {\\n    // vec2 newUV = (vUv - vec2(0.5))*vec2(2., 1.) + vec2(0.5);\\n\\n    // vec2 newUV = vUv*2.;\\n    vec2 correctUV = getUV(vUv, uTextureSize, vSize);\\n\\n    // vec4 image = texture(uTexture, newUV);\\n    vec4 image = texture(uTexture, correctUV);\\n    gl_FragColor = vec4(vUv, 0., 1.);\\n    gl_FragColor = image;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"Shaders/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"Shaders/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"Shaders/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"Shaders/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"Shaders/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":948},"source":"Shaders/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"Shaders/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\n\\nvarying vec2 vUv;\\n\\nvarying vec2 vSize;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize) {\\n    vec2 tempUV = uv - vec2(0.5);\\n\\n    float quadAspect = quadSize.x/quadSize.y;\\n    float textureAspect = textureSize.x/textureSize.y;\\n    if (quadAspect<textureAspect) {\\n        tempUV = tempUV*vec2(quadAspect/textureAspect, 1.);\\n    } else {\\n        tempUV = tempUV*vec2(1., textureAspect/quadAspect);\\n    }\\n\\n    tempUV += vec2(0.5);\\n    return tempUV;\\n}\\n\\nvoid main () {\\n    // vec2 newUV = (vUv - vec2(0.5))*vec2(2., 1.) + vec2(0.5);\\n\\n    // vec2 newUV = vUv*2.;\\n    vec2 correctUV = getUV(vUv, uTextureSize, vSize);\\n\\n    // vec4 image = texture(uTexture, newUV);\\n    vec4 image = texture(uTexture, correctUV);\\n    gl_FragColor = vec4(vUv, 0., 1.);\\n    gl_FragColor = image;\\n}\";"},"lineCount":null}},"error":null,"hash":"2b906cb7dc935f42ab185a37f6ddaeb0","cacheData":{"env":{}}}